//-----------------------------------------------------------------------------
// <auto-generated> 
// ^^^ Comment out the above line to allow ReSharper to validate the 
//  using clauses.
//	This code was generated from a template.
//
//	Manual changes to this file may cause unexpected behavior in your 
//	application.
//	Manual changes to this file will be overwritten if the code is 
//	regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------

namespace FbcBookIt.Repository
{
	using System;
	using System.Collections.Generic;
	using System.Data;
	using System.Linq;
	//using AWEFramework.AWECmn;
	//using Entity;
	using FbcBookIt.DataAccess;
	using FbcBookIt.Entity;
	
	// Table Name: District
	public partial interface IDistrictR
		: IBASE_RepositoryDbTable
	{
		bool Any();
	
		bool Exists(System.Guid aDistrictId);
	
		// The only difference between "Find" and "Get" is that "Get" will return
		// a null if the record sought is not found whereas "Find" will throw
		// an exception.
		District Find(System.Guid aDistrictId);
	
		// The only difference between "Find" and "Get" is that "Get" will return
		// a null if the record sought is not found whereas "Find" will throw
		// an exception.
		District Get(System.Guid aDistrictId);
	
		List<District> GetAll();
	
		// There are several methods that add a record to a table:
		//	1. Add
		//  2. Insert
		//  3. InsertAndReturnPrimaryKey
		// - Add will add the record if possible and return the entity updated with
		// the primary key information
		// - Insert will add the record if possible and return void.
		// - InsertAndReturnPrimaryKey will add the record if possible and then 
		// return the new primary key (a single value for single primary key
		// tables, an instance of a custom class containing all portions of the 
		// primary key for a table with a compound primary key).
		District Add(District aDistrict);
	
		// There are several methods that add a record to a table:
		//	1. Add
		//  2. Insert
		//  3. InsertAndReturnPrimaryKey
		// - Add will add the record if possible and return the entity updated with
		// the primary key information
		// - Insert will add the record if possible and return void.
		// - InsertAndReturnPrimaryKey will add the record if possible and then 
		// return the new primary key (a single value for single primary key
		// tables, an instance of a custom class containing all portions of the 
		// primary key for a table with a compound primary key).
		void Insert(District aDistrict);
	
		// There are several methods that add a record to a table:
		//	1. Add
		//  2. Insert
		//  3. InsertAndReturnPrimaryKey
		// - Add will add the record if possible and return the entity updated with
		// the primary key information
		// - Insert will add the record if possible and return void.
		// - InsertAndReturnPrimaryKey will add the record if possible and then 
		// return the new primary key (a single value for single primary key
		// tables, an instance of a custom class containing all portions of the 
		// primary key for a table with a compound primary key).
		System.Guid InsertAndReturnPrimaryKey(District aDistrict);
	
		void Update(District aDistrict);
	
		void Delete(System.Guid aDistrictId);
	
		bool IsActive(System.Guid aDistrictId);
	
		void Remove(System.Guid aDistrictId);
	
		void Restore(System.Guid aDistrictId);
	
		void DeleteAllRemoved();
	
	}
	
	public partial class DistrictR
		: BASE_RepositoryDbTable, IDistrictR
	{
		public DistrictR
			(IFbcBookItContext aDb): base(aDb)
		{
		}
	
		public bool Any()
		{
			bool vResult;
			vResult = _Db.DistrictDb.Any();
			return vResult;
		}
	
		public bool Exists(System.Guid aDistrictId)
		{
			bool vResult;
				vResult = _Db.DistrictDb.Any(aRec => (aRec.DistrictId == aDistrictId));
			return vResult;
		}
	
		public District Find(System.Guid aDistrictId)
		{
			District vResult;
			vResult = _Db.DistrictDb.Single(aRec => (aRec.DistrictId == aDistrictId));
			return vResult;
		}
	
		public District Get(System.Guid aDistrictId)
		{
			District vResult;
			vResult = _Db.DistrictDb.FirstOrDefault(aRec => aRec.DistrictId == aDistrictId);
			return vResult;
		}
	
		public List<District> GetAll()
		{
			List<District> vResult;
			vResult = _Db.DistrictDb.ToList();
			return vResult;
		}
	
		/// <remark>
		/// Fragile:	This method presumes that any integer keys are
		///						auto-incrementing.
		/// </remark>
		public District Add(District aDistrict)
		{
			if (aDistrict == null)
			{
				throw new ArgumentNullException("aDistrict", " cannot be null!");
			}
	/*
			if (!aDistrict.IsRootEntity())
			{
				aDistrict.ClearToRootEntity();
			}
	*/
			if (!aDistrict.IsNew())
			{
				const string MESSAGE = 
					"District Insert failed. Record has failed \"IsNew\" test.";
				throw new Exception(MESSAGE);
			}
				aDistrict.AssignNewPK();
			aDistrict = _Db.DistrictDb.Add(aDistrict);
			_Db.SaveChanges();
			return aDistrict;
		}
	
		/// <remark>
		/// Fragile:	This method presumes that any integer keys are
		///						auto-incrementing.
		/// </remark>
		public void Insert(District aDistrict)
		{
			if (aDistrict == null)
			{
				throw new ArgumentNullException("aDistrict", " cannot be null!");
			}
	/*
			if (!aDistrict.IsRootEntity())
			{
				aDistrict.ClearToRootEntity();
			}
	*/
			if (!aDistrict.IsNew())
			{
				const string MESSAGE = 
					"District Insert failed. Record has failed \"IsNew\" test.";
				throw new Exception(MESSAGE);
			}
			aDistrict.AssignNewPK();
			_Db.DistrictDb.Add(aDistrict);
			_Db.SaveChanges();
		}
	
		/// <remark>
		/// Fragile:	This method presumes that any integer keys are
		///						auto-incrementing.
		/// </remark>
		public System.Guid InsertAndReturnPrimaryKey(District aDistrict)
		{
			if (aDistrict == null)
			{
				throw new ArgumentNullException("aDistrict", " cannot be null!");
			}
	/*
			if (!aDistrict.IsRootEntity())
			{
				aDistrict.ClearToRootEntity();
			}
	*/
			if (!aDistrict.IsNew())
			{
				const string MESSAGE = 
					"District Insert failed. Record has failed \"IsNew\" test.";
				throw new Exception(MESSAGE);
			}
			aDistrict.AssignNewPK();
			aDistrict = _Db.DistrictDb.Add(aDistrict);
			_Db.SaveChanges();
			System.Guid vResult = aDistrict.DistrictId;
			return vResult;
		}
	
		public void Update(District aDistrict)
		{
			District vRec = 
				_Db.DistrictDb.FirstOrDefault(aRec => aRec.DistrictId == aDistrict.DistrictId);
			vRec.AssignFromNoPrimaryKeys(aDistrict);
			_Db.SaveChanges();
		}
	
		public void Delete(System.Guid aDistrictId)
		{
			District vRec = 
				_Db.DistrictDb.FirstOrDefault(aRec => aRec.DistrictId == aDistrictId);
			if (vRec == null)
			{
				return; // Record is already gone, no worries!
			}
			_Db.DistrictDb.Remove(vRec);
			_Db.SaveChanges();
		}
	
		public bool IsActive(System.Guid aDistrictId)
		{
			District vRec = 
				_Db.DistrictDb.FirstOrDefault(aRec => aRec.DistrictId == aDistrictId);
			bool vResult = (vRec != null) && vRec.Active;
			return vResult;
		}
	
		public void Remove(System.Guid aDistrictId)
		{
			District vRec = 
				_Db.DistrictDb.FirstOrDefault(aRec => aRec.DistrictId == aDistrictId);
			if (vRec == null)
			{
				return;
			}
			vRec.Active = false;
			_Db.SaveChanges();
		}
	
		public void Restore(System.Guid aDistrictId)
		{
			District vRec = 
				_Db.DistrictDb.FirstOrDefault(aRec => aRec.DistrictId == aDistrictId);
			if (vRec == null)
			{
				return;
			}
			vRec.Active = true;
			_Db.SaveChanges();
		}
	
		/// <remark>
		/// Note that this method in EF is Really Ugly in that EF requires that 
		/// each record to be deleted must first be brought into the context, then 
		/// "removed", then SaveChanges called to actually delete the record(s).
		/// For a large number of records this gets memory intensive.
		/// </remark>
		public void DeleteAllRemoved()
		{
			List<District> vToDelete =
				_Db.DistrictDb
					.Where(aRec => !aRec.Active).ToList();
			if (vToDelete.Count < 1)
			{
				return;
			}
			foreach (District vRec in vToDelete)
			{
				_Db.DistrictDb.Remove(vRec);
			}
			_Db.SaveChanges();
		}
	
	}
}
