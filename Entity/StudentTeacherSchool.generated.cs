//-----------------------------------------------------------------------------
// <auto-generated> 
// ^^^ Comment out the above line to allow ReSharper to validate the 
//  using clauses.
//	This code was generated from a template.
//
//	Manual changes to this file may cause unexpected behavior in your 
//	application.
//	Manual changes to this file will be overwritten if the code is 
//	regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------

namespace FbcBookIt.Entity
{
	using System;
	using System.ComponentModel.DataAnnotations;
	using System.Data.Entity.ModelConfiguration;
	using System.ComponentModel.DataAnnotations.Schema;
	//using AWEFramework.AWEExtensions;
	using FbcBookIt.Utility;
	using System.Collections.Generic;
	
	// Table Name: StudentTeacherSchool
	public partial class StudentTeacherSchool: BASE_Entity
	{
		// Primary Keys
		public System.Guid ID { get; set; }
	
		// Non-Primary columns
		public System.Boolean Active { get; set; }
		// Foreign Key to School
		public System.Guid SchoolID { get; set; }
		// Foreign Key to Student
		public System.Guid StudentID { get; set; }
		// Foreign Key to Teacher
		public System.Guid TeacherID { get; set; }
	
	}
	
	public class StudentTeacherSchoolMap: EntityTypeConfiguration<StudentTeacherSchool>
	{
		public StudentTeacherSchoolMap()
		{
			// Map entity to table
			ToTable("StudentTeacherSchool");
	
			// Map property to column
			Property(t => t.Active).HasColumnName("Active");
			Property(t => t.ID).HasColumnName("ID");
			Property(t => t.SchoolID).HasColumnName("SchoolID");
			Property(t => t.StudentID).HasColumnName("StudentID");
			Property(t => t.TeacherID).HasColumnName("TeacherID");
	
			// Primary Key
			HasKey(t => t.ID);
	
			// Additional property mappings
			Property(t => t.Active)
				.IsRequired();
	
			Property(t => t.ID)
				.IsRequired();
	
			Property(t => t.SchoolID)
				.IsRequired();
	
			Property(t => t.StudentID)
				.IsRequired();
	
			Property(t => t.TeacherID)
				.IsRequired();
	
	
		}
	}
	
	public static partial class StudentTeacherSchoolHelper
	{
		public static void AssignNewPK
			(this StudentTeacherSchool aStudentTeacherSchool)
		{
			aStudentTeacherSchool.ID = Guid.NewGuid().CombGuid();
		}
	
		/// <summary> 
		/// This code is fragile in that is ASSUMES that integer primary keys ARE
		/// AUTO-INCREMENTING columns whose value is governed by the database 
		/// server and that Guid primary keys are NOT "computed" values but rather 
		/// those whose column value is set by the client and/or server in a 
		/// fashion NOT governed by the database server.
		/// </summary>
		public static bool IsNew
			(this StudentTeacherSchool aStudentTeacherSchool)
		{
			if (aStudentTeacherSchool == null)
			{
				throw 
					new ArgumentNullException
						(
							"aStudentTeacherSchool"
							, "Entity instance cannot be null!"
						);
			}
			bool vResult = 
				(aStudentTeacherSchool.ID == Guid.Empty);
			return vResult;
		}
	
		public static void AssignTo
			(StudentTeacherSchool aFrom, StudentTeacherSchool aTo)
		{
			aTo.Active = aFrom.Active;
			aTo.ID = aFrom.ID;
			aTo.SchoolID = aFrom.SchoolID;
			aTo.StudentID = aFrom.StudentID;
			aTo.TeacherID = aFrom.TeacherID;
		}
	
		public static void AssignToNoPrimaryKeys
			(StudentTeacherSchool aFrom, StudentTeacherSchool aTo)
		{
			aTo.Active = aFrom.Active;
			aTo.SchoolID = aFrom.SchoolID;
			aTo.StudentID = aFrom.StudentID;
			aTo.TeacherID = aFrom.TeacherID;
		}
	
		public static void AssignToJustPrimaryKeys
			(StudentTeacherSchool aFrom, StudentTeacherSchool aTo)
		{
			aTo.ID = aFrom.ID;
		}
	
		public static void AssignFrom
			(this StudentTeacherSchool aTo, StudentTeacherSchool aFrom)
		{
			aTo.Active = aFrom.Active;
			aTo.ID = aFrom.ID;
			aTo.SchoolID = aFrom.SchoolID;
			aTo.StudentID = aFrom.StudentID;
			aTo.TeacherID = aFrom.TeacherID;
		}
	
		public static void AssignFromNoPrimaryKeys
			(this StudentTeacherSchool aTo, StudentTeacherSchool aFrom)
		{
			aTo.Active = aFrom.Active;
			aTo.SchoolID = aFrom.SchoolID;
			aTo.StudentID = aFrom.StudentID;
			aTo.TeacherID = aFrom.TeacherID;
		}
	
		public static void AssignFromJustPrimaryKeys
			(this StudentTeacherSchool aTo, StudentTeacherSchool aFrom)
		{
			aTo.ID = aFrom.ID;
		}
	
	}
}
