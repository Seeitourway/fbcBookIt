//-----------------------------------------------------------------------------
// <auto-generated> 
// ^^^ Comment out the above line to allow ReSharper to validate the 
//  using clauses.
//	This code was generated from a template.
//
//	Manual changes to this file may cause unexpected behavior in your 
//	application.
//	Manual changes to this file will be overwritten if the code is 
//	regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------

namespace FbcBookIt.Entity
{
	using System;
	using System.ComponentModel.DataAnnotations;
	using System.Data.Entity.ModelConfiguration;
	using System.ComponentModel.DataAnnotations.Schema;
	//using AWEFramework.AWEExtensions;
	using FbcBookIt.Utility;
	using System.Collections.Generic;
	
	// Table Name: School
	public partial class School: BASE_Entity
	{
		// Primary Keys
		public System.Guid SchoolID { get; set; }
	
		// Non-Primary columns
		public System.Boolean Active { get; set; }
		public System.String City { get; set; }
		public System.String ContactName { get; set; }
		// Foreign Key to District
		public System.Guid DistrictID { get; set; }
		public System.String Email { get; set; }
		public System.String Name { get; set; }
		public System.String Phone { get; set; }
		public System.String State { get; set; }
		public System.String StreetAddress { get; set; }
		public System.String ZipPlus4 { get; set; }
	
	}
	
	public class SchoolMap: EntityTypeConfiguration<School>
	{
		public SchoolMap()
		{
			// Map entity to table
			ToTable("School");
	
			// Map property to column
			Property(t => t.Active).HasColumnName("Active");
			Property(t => t.City).HasColumnName("City");
			Property(t => t.ContactName).HasColumnName("ContactName");
			Property(t => t.DistrictID).HasColumnName("DistrictID");
			Property(t => t.Email).HasColumnName("Email");
			Property(t => t.Name).HasColumnName("Name");
			Property(t => t.Phone).HasColumnName("Phone");
			Property(t => t.SchoolID).HasColumnName("SchoolID");
			Property(t => t.State).HasColumnName("State");
			Property(t => t.StreetAddress).HasColumnName("StreetAddress");
			Property(t => t.ZipPlus4).HasColumnName("ZipPlus4");
	
			// Primary Key
			HasKey(t => t.SchoolID);
	
			// Additional property mappings
			Property(t => t.Active)
				.IsRequired();
	
			Property(t => t.DistrictID)
				.IsRequired();
	
			Property(t => t.SchoolID)
				.IsRequired();
	
			Property(t => t.ZipPlus4)
				.IsFixedLength()
				.HasMaxLength(10);
	
	
		}
	}
	
	public static partial class SchoolHelper
	{
		public static void AssignNewPK
			(this School aSchool)
		{
			aSchool.SchoolID = Guid.NewGuid().CombGuid();
		}
	
		/// <summary> 
		/// This code is fragile in that is ASSUMES that integer primary keys ARE
		/// AUTO-INCREMENTING columns whose value is governed by the database 
		/// server and that Guid primary keys are NOT "computed" values but rather 
		/// those whose column value is set by the client and/or server in a 
		/// fashion NOT governed by the database server.
		/// </summary>
		public static bool IsNew
			(this School aSchool)
		{
			if (aSchool == null)
			{
				throw 
					new ArgumentNullException
						(
							"aSchool"
							, "Entity instance cannot be null!"
						);
			}
			bool vResult = 
				(aSchool.SchoolID == Guid.Empty);
			return vResult;
		}
	
		public static void AssignTo
			(School aFrom, School aTo)
		{
			aTo.Active = aFrom.Active;
			aTo.City = aFrom.City;
			aTo.ContactName = aFrom.ContactName;
			aTo.DistrictID = aFrom.DistrictID;
			aTo.Email = aFrom.Email;
			aTo.Name = aFrom.Name;
			aTo.Phone = aFrom.Phone;
			aTo.SchoolID = aFrom.SchoolID;
			aTo.State = aFrom.State;
			aTo.StreetAddress = aFrom.StreetAddress;
			aTo.ZipPlus4 = aFrom.ZipPlus4;
		}
	
		public static void AssignToNoPrimaryKeys
			(School aFrom, School aTo)
		{
			aTo.Active = aFrom.Active;
			aTo.City = aFrom.City;
			aTo.ContactName = aFrom.ContactName;
			aTo.DistrictID = aFrom.DistrictID;
			aTo.Email = aFrom.Email;
			aTo.Name = aFrom.Name;
			aTo.Phone = aFrom.Phone;
			aTo.State = aFrom.State;
			aTo.StreetAddress = aFrom.StreetAddress;
			aTo.ZipPlus4 = aFrom.ZipPlus4;
		}
	
		public static void AssignToJustPrimaryKeys
			(School aFrom, School aTo)
		{
			aTo.SchoolID = aFrom.SchoolID;
		}
	
		public static void AssignFrom
			(this School aTo, School aFrom)
		{
			aTo.Active = aFrom.Active;
			aTo.City = aFrom.City;
			aTo.ContactName = aFrom.ContactName;
			aTo.DistrictID = aFrom.DistrictID;
			aTo.Email = aFrom.Email;
			aTo.Name = aFrom.Name;
			aTo.Phone = aFrom.Phone;
			aTo.SchoolID = aFrom.SchoolID;
			aTo.State = aFrom.State;
			aTo.StreetAddress = aFrom.StreetAddress;
			aTo.ZipPlus4 = aFrom.ZipPlus4;
		}
	
		public static void AssignFromNoPrimaryKeys
			(this School aTo, School aFrom)
		{
			aTo.Active = aFrom.Active;
			aTo.City = aFrom.City;
			aTo.ContactName = aFrom.ContactName;
			aTo.DistrictID = aFrom.DistrictID;
			aTo.Email = aFrom.Email;
			aTo.Name = aFrom.Name;
			aTo.Phone = aFrom.Phone;
			aTo.State = aFrom.State;
			aTo.StreetAddress = aFrom.StreetAddress;
			aTo.ZipPlus4 = aFrom.ZipPlus4;
		}
	
		public static void AssignFromJustPrimaryKeys
			(this School aTo, School aFrom)
		{
			aTo.SchoolID = aFrom.SchoolID;
		}
	
	}
}
